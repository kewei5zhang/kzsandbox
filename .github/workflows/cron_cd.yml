name: "cron_cd"

on:
  push:
    branches:
      - master
  schedule:
    - cron: "0 9-16 * * 1-5" # ToDo: Run during business hours in the US

jobs:
  deployment:
    runs-on: ubuntu-latest
    steps:
      # Step 0: Checkout
      - name: Check Out The Repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      # Step 1: Fetch latest waiting deploys_all job ID
      - name: Fetch latest waiting deploys_all job ID
        id: fetch_job_id
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          job_id=$(gh api \
            -H "Accept: application/vnd.github+json" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            /repos/${{ github.repository }}/actions/workflows/deploy_all.yml/runs | jq '[.workflow_runs[] | select(.status == "waiting")][0].id')
          echo $job_id
          echo "JOB_ID=${job_id}" >> $GITHUB_ENV

      # Step 2: Download Artifact
      - name: Download Artifact
        uses: actions/download-artifact@v4
        with:
          run-id:  ${{ env.JOB_ID }}
          github-token: ${{ secrets.ACTION_READ_TOKEN }}
          path: ./artifacts

      # Step 3: Extract image tag
      - name: Extract image tag
        id: extract_image_tag
        run: |
          image_tag=$(cat ./artifacts/image_tag/image_tag.txt)
          echo "IMAGE_TAG=${image_tag}" >> $GITHUB_ENV

      # Step 4: Generate release note
      - name: Release note
        id: release-note
        shell: bash
        run: |
            latest_tag="$(git ls-remote --tags origin 'release-v*' | awk -F"/" '{gsub(/\^\{\}/, "", $3); print $3}' | sort -r | head -n 1)"
            commit_to_release="${{ env.IMAGE_TAG }}"
            release_note="$(git --no-pager log --pretty=oneline --format='%h%x09%an%x09%x09%s' $commit_to_release...$latest_tag)"
            release_tag="release-v0.1.$(date -u +'%Y%m%d%H%M')"
            echo "### Release Info" >> "$GITHUB_STEP_SUMMARY"
            echo "- **Image tag:** $commit_to_release" >> "$GITHUB_STEP_SUMMARY"
            echo "- **Release tag:** $release_tag" >> "$GITHUB_STEP_SUMMARY"
            echo "- **Release notes:**" >> "$GITHUB_STEP_SUMMARY"
            echo "$release_note" >> "$GITHUB_STEP_SUMMARY"
            echo "RELEASE_TAG=$release_tag" >> $GITHUB_ENV
            echo "RELEASE_NOTE<<EOF" >> $GITHUB_ENV
            echo "$RELEASE_NOTE" >> $GITHUB_ENV
            echo "EOF" >> $GITHUB_ENV
      
      # Step 5: Send Slack Notification - Release Notes
      - name: Slack notification
        uses: rtCamp/action-slack-notify@v2.2.1
        continue-on-error: true # Continue even if the Slack notification fails.
        env:
          SLACK_CHANNEL: "test-slack-integration"
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }} # Ensure you have set this secret in the repository under the target environment.
          SLACK_COLOR: ${{ job.status == 'success' && '#2eb886' || '#ff0000' }} # Green for success, Red for failure.
          SLACK_TITLE: "ðŸš€ Deploying ${{ env.IMAGE_TAG }} in 5 mins"
          SLACK_MESSAGE: |
            *Release Tag:* ${{ env.RELEASE_TAG }}
            *Release notes:*
            ${{ env.RELEASE_NOTE }}
          SLACK_USERNAME: deployment bot # Customize the Slack username sending the message.

      # # Step 3: Send Slack notification with release notes
      # - name: Send Slack Notification - Release Notes
      #   uses: rtCamp/action-slack-notify@v2
      #   env:
      #     SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
      #     SLACK_TITLE: "Release Notification"
      #     SLACK_MESSAGE: "Release notes and image tag fetched. Preparing for deployment."
      #     SLACK_COLOR: "#36A64F"

      # # Step 4: Waiting for 5 minutes for cancel
      # - name: Wait for 5 minutes
      #   run: sleep 300

      # # Step 6: Send Slack Notification - Job Starting
      # - name: Send Slack Notification - Job Starting
      #   uses: rtCamp/action-slack-notify@v2
      #   env:
      #     SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
      #     SLACK_TITLE: "Deployment Starting"
      #     SLACK_MESSAGE: "The deployment job is starting now."
      #     SLACK_COLOR: "#FFA500"

      # # Step 7: Wait for deploys_all job to finish
      # # [Add steps to wait for deploys_all job to finish, if needed]

      # # Step 8: Send Slack Notification - Job Finished
      # - name: Send Slack Notification - Job Finished
      #   uses: rtCamp/action-slack-notify@v2
      #   env:
      #     SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
      #     SLACK_TITLE: "Deployment Finished"
      #     SLACK_MESSAGE: "The deployment job has finished."
      #     SLACK_COLOR: "#008000"

      # # Release Tagging (Based on your script logic)
      # - name: Release Tagging
      #   run: |
      #     # Your script here
