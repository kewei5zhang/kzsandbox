name: "cron_cd"

on:
  push:
    branches:
      - master
  schedule:
    - cron: "0 9-16 * * 1-5" # ToDo: Run during business hours in the US

permissions:
  actions: write

jobs:
  deployment:
    runs-on: ubuntu-latest
    steps:
      # Step 0: Checkout
      - name: Check Out The Repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          token: ${{ secrets.ACTION_READ_TOKEN }}
      # Step 1: Fetch latest waiting deploys_all job ID
      - name: Fetch latest waiting deploys_all job ID
        id: fetch_job_id
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          job_id=$(gh api \
            -H "Accept: application/vnd.github+json" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            /repos/${{ github.repository }}/actions/workflows/deploy_all.yml/runs | jq '[.workflow_runs[] | select(.status == "waiting")][0].id')
          echo $job_id
          echo "JOB_ID=${job_id}" >> $GITHUB_ENV

      # Step 2: Download Artifact
      - name: Download Artifact
        uses: actions/download-artifact@v4
        with:
          run-id:  ${{ env.JOB_ID }}
          github-token: ${{ secrets.ACTION_READ_TOKEN }}
          path: ./artifacts

      # Step 3: Extract image tag
      - name: Extract image tag
        id: extract_image_tag
        run: |
          image_tag=$(cat ./artifacts/image_tag/image_tag.txt)
          echo "IMAGE_TAG=${image_tag}" >> $GITHUB_ENV

      # Step 4: Generate release note
      - name: Release note
        id: release-note
        shell: bash
        run: |
            latest_tag="$(git ls-remote --tags origin 'release-v*' | awk -F"/" '{gsub(/\^\{\}/, "", $3); print $3}' | sort -r | head -n 1)"
            commit_to_release="${{ env.IMAGE_TAG }}"
            release_note="$(git --no-pager log --pretty=oneline --format='%h%x09%an%x09%x09%s' $commit_to_release...$latest_tag)"
            release_tag="release-v0.1.$(date -u +'%Y%m%d%H%M')"
            echo "### Release Info" >> "$GITHUB_STEP_SUMMARY"
            echo "- **Image tag:** $commit_to_release" >> "$GITHUB_STEP_SUMMARY"
            echo "- **Release tag:** $release_tag" >> "$GITHUB_STEP_SUMMARY"
            echo "- **Release notes:**" >> "$GITHUB_STEP_SUMMARY"
            echo "$release_note" >> "$GITHUB_STEP_SUMMARY"
            echo "RELEASE_TAG=$release_tag" >> $GITHUB_ENV
            echo "RELEASE_NOTE<<EOF" >> $GITHUB_ENV
            echo "$release_note" >> $GITHUB_ENV
            echo "EOF" >> $GITHUB_ENV
      
      # Step 5: Send Slack Notification - Release Notes
      - name: Slack notification
        uses: rtCamp/action-slack-notify@v2.2.1
        env:
          SLACK_CHANNEL: "test-slack-integration"
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }} # Ensure you have set this secret in the repository under the target environment.
          # SLACK_COLOR: ${{ job.status == 'success' && '#2eb886' || '#ff0000' }} # Green for success, Red for failure.
          SLACK_COLOR: '#808080' # Green for success, Red for failure.
          SLACK_TITLE: "ðŸ•¥ Deploying ${{ env.IMAGE_TAG }} in 5 mins"
          SLACK_MESSAGE: |
            *Release Tag:* ${{ env.RELEASE_TAG }}
            *Release notes:*
            ${{ env.RELEASE_NOTE }}
          SLACK_USERNAME: deployment bot # Customize the Slack username sending the message.
      
      # Step 6: Wait for 5 minutes for cancel
      - name: Wait for 5 minutes
        run: sleep 3

      # Step 7: Release Tagging
      - name: Release Tagging
        run: |
          git config --global user.name "GitHub Action"
          git config --global user.email "deployer@magiceden.io"
          git tag -a ${{ env.RELEASE_TAG }} ${{ env.IMAGE_TAG }} -m "New release tag ${{ env.RELEASE_TAG }}"
          git push origin ${{ env.RELEASE_TAG }}
        env:
          GITHUB_TOKEN: ${{ github.token }}

      # Step 8: Send Slack Notification - Job Starting
      - name: Slack notification
        uses: rtCamp/action-slack-notify@v2.2.1
        env:
          SLACK_CHANNEL: "test-slack-integration"
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }} # Ensure you have set this secret in the repository under the target environment.
          # SLACK_COLOR: ${{ job.status == 'success' && '#2eb886' || '#ff0000' }} # Green for success, Red for failure.
          SLACK_COLOR: '#808080' # Green for success, Red for failure.
          SLACK_TITLE: "ðŸš€ Deploying ${{ env.IMAGE_TAG }} now"
          SLACK_MESSAGE: |
            *Deploys all job link:* https://github.com/${{ github.repository }}/actions/runs/${{ env.JOB_ID }}
          SLACK_USERNAME: deployment bot # Customize the Slack username sending the message.

      # Step 9: Approve deployment
      - name: Approve deployment
        shell: bash
        run: |
          JSON_DATA=$(jq -n \
                        --arg eid "${{ env.ENVIRONMENT_ID }}" \
                        '{environment_ids: [$eid|tonumber], state: "approved", comment: "Auto-approval by GitHub Action"}')
          gh api \
            -X POST \
            -H "Accept: application/vnd.github+json" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            /repos/${{ github.repository }}/actions/runs/${{ env.JOB_ID }}/pending_deployments \
            --input <(echo $JSON_DATA)
        env:
          GH_TOKEN: ${{ secrets.ACTION_READ_TOKEN }}
          ENVIRONMENT_ID: "591606016"
        
      
      # Step 10: Wait for deploys_all job to finish
      - name: Wait for deploys_all job to finish
        uses: ./.github/actions/wait_workflow_runs
        id: wait-for-workflow-action
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          run: ${{ env.JOB_ID }}

      # Step 11: Check if deploys_all job is successful
      - name: Check if deploys_all job is successful
        id: check-deploys-all-job
        run: |
          job_conclusion=$(gh api \
            -H "Accept: application/vnd.github+json" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            /repos/${{ github.repository }}/actions/runs/${{ env.JOB_ID }} | jq '.conclusion')
          echo "JOB_CONCLUSION=${job_conclusion}" >> $GITHUB_ENV
        env:
          GH_TOKEN: ${{ github.token }}

      # Step 12: Send Slack Notification - Job Finished
      - name: Slack notification
        if : ${{ always()}}
        uses: rtCamp/action-slack-notify@v2.2.1
        continue-on-error: true
        env:
          SLACK_CHANNEL: "test-slack-integration"
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }} # Ensure you have set this secret in the repository under the target environment.
          SLACK_COLOR: ${{ env.JOB_CONCLUSION == '"success"' && '#2eb886' || '#ff0000' }} # Green for success, Red for failure.
          SLACK_TITLE: ${{ env.JOB_CONCLUSION == '"success"' && 'ðŸŽ‰ Deployment Success' || 'ðŸš¨ Deployment Failed' }}
          SLACK_MESSAGE: |
            *Deploys all job link:* https://github.com/${{ github.repository }}/actions/runs/${{ env.JOB_ID }}
